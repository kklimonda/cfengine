bundle common classes
{
  classes:
      "mail_server" or => { classify("synth") };
      "database_master" or => { classify("synth") };
      "web_server" or => { classify("synth") };
      "rails_app_server" or => { classify("synth") };
      "redmine_app_server" or => { classify("synth") };
      "redmine_akronet" or => { classify("synth") };
      "git_server" or => { classify("synth") };
}

bundle common g
{
  vars:
    any::
      "bseq" slist => {
        "manage_users",
        "cfengine_repo",
        "corepackages",
        "configfiles"
      }, policy => "free";
    mail_server::
      "bseq" slist => {
        @{bseq},
        "postfix"
      }, policy => "free";
    web_server::
      "bseq" slist => {
        @{bseq},
        "nginx"
      }, policy => "free";
    database_master::
      "bseq" slist => {
        @{bseq},
        "postgres"
      }, policy => "free";
    redmine_app_server::
      "bseq" slist => {
        @{bseq},
        "redmine"
      }, policy => "free";
    git_server::
      "bseq" slist => {
        @{bseq},
        "gitolite"
      }, policy => "free";
    almond::
      "bseq" slist => {
        @{bseq},
        "create_akronet_sql_dump"
      }, policy => "free";
    synth_pl::
      "bseq" slist => {
        @{bseq},
        "restore_akronet_sql_dump",
        "sync_uploaded_files"
      }, policy => "free";
}

body common control
{ 
  any::
      bundlesequence => { "@(g.bseq)" };

      inputs => {
          # Global common bundles
            "def.cf",

          # Private data (passwords), not to be shared with anyone
            "private.cf",

          # Control body for agents
            "controls/cf_agent.cf",
            "controls/cf_execd.cf",
            "controls/cf_monitord.cf",
            "controls/cf_report.cf",
            "controls/cf_runagent.cf",
            "controls/cf_serverd.cf",

          # CFEngine3 Standard Library
            "libraries/cfengine_stdlib.cf",
            "libraries/library.cf",

            "services/postfix.cf",
            "services/gitolite.cf",
            "services/postgres.cf",
            "services/redmine.cf",
            "services/nginx.cf",
          };

      version => "0.1";
}

bundle agent cfengine_repo
{
  files:
      "/etc/apt/sources.list.d/cfengine-community.list"
        create => "true",
        edit_line => "cfengine_community_list",
        classes => if_repaired("apt_get_update");
      
  classes:
      "cfengine_gpg_key_installed" expression => returnszero("/usr/bin/apt-key list |grep -q CFEngine", "useshell");

  commands:
    !cfengine_gpg_key_installed::
      "/usr/bin/wget \"http://cfengine.com/pub/gpg.key\" -O /tmp/gpg.key";
      "/usr/bin/apt-key add /tmp/gpg.key";

    apt_get_update::
      "/usr/bin/apt-get update";
}

bundle edit_line cfengine_community_list
{
  delete_lines:
      ".*";

  insert_lines:
      "deb http://cfengine.com/pub/apt precise main";
}

bundle agent corepackages
{
  files:
      "/tmp/.s.PGSQL.5432"
        link_from => ln_s("/run/postgresql/.s.PGSQL.5432");
  vars:
      "pkglist" slist => { "cfengine-community", "vim", "git" };

  packages:
    any::
      "$(pkglist)" package_policy => "addupdate";
    rails_app_server::
      "gcc"
        package_policy => "addupdate",
        package_method => generic;
      "make"
        package_policy => "addupdate",
        package_method => generic;
      "ruby1.9.1"
        package_policy => "addupdate",
        package_method => generic;
      "ruby1.9.1-dev"
        package_policy => "addupdate",
        package_method => generic;
}

bundle agent configfiles
{
  vars:
      "files[sshd]" string => "/etc/ssh/sshd_config";

      "sshd[Protocol]" string => "2";
      "sshd[X11Forwarding]" string => "no";
      "sshd[PermitRootLogin]" string => "no";
    !ubuntu_10_4::
      "sshd[UseDNS]" string => "no";


  files:
      "/etc/apt/apt.conf.d/."
        create => "true";
      
      "/etc/apt/apt.conf.d/20recommends"
        create => "true",
        handle => "apt_config",
        comment => "Disable Recomendation and Suggestion installation in Apt",
        edit_line => edit_apt_config;

      # A deployment SSH key, not available in the public repository
      "/root/.ssh/id_rsa"
        copy_from => secure_cp("$(sys.workdir)/masterfiles/templates/deployment.sshkey", "$(sys.policy_hub)");

  methods:
      "sshd" usebundle => edit_sshd;
      "hosts" usebundle => edit_hosts_file;
    !almond::
      "aliases" usebundle => edit_aliases_file;
}

bundle agent edit_sshd
{
  packages:
      "openssh-server";

  files:
      "$(configfiles.files[sshd])"
        handle => "sshd_config",
        comment => "Configure the SSH daemon",
        edit_line => set_config_values("configfiles.sshd"),
        classes => if_repaired("restart_sshd");

  commands:
      restart_sshd.!no_restarts::
        "/usr/sbin/service ssh reload"
        handle => "sshd_restart",
        comment => "Restart the SSH daemon if the configuration changes";
}

bundle agent edit_aliases_file
{
  files:
      "/etc/aliases"
        edit_line => append_if_no_line("root: kklimonda");
}

bundle agent edit_hosts_file
{
  vars:
      "template" string =>
"# IP-Address    FQDN                   Hostname
127.0.0.1       localhost
::1             ip6-localhost           ip6-loopback
fe00::0         ip6-localnet    
ff00::0         ip6-mcastprefix
ff02::1         ip6-allnodes
ff02::2         ip6-allrouters
192.81.223.120  synth.pl                synth
109.74.203.16   syntaxhighlighted.com   almond
";

  files:
      "/etc/hosts"
        comment => "Define a static list of hosts from the template",
        create => "true",
        edit_defaults => empty,
        edit_line => append_if_no_lines("$(template)"),
        perms => mo("0644", "root"),
        action => if_elapsed("60");
}

bundle agent manage_users
{
  vars:
      "users[kklimonda][fullname]" string => "Krzysztof Klimonda";
      "users[kklimonda][shell]" string => "/bin/bash";
      "users[kklimonda][flags]" string => "-m";
      "users[kklimonda][passwd_hash]" string => "$(private_g.password[shadow_kklimonda])";

  methods:
      "users" usebundle => create_users("manage_users.users");
}

bundle agent restore_akronet_sql_dump
{
  vars:
    "almond_host" string => "syntaxhighlighted.com";

  files:
    Min15::
      "/tmp/akronet.sql"
        copy_from => secure_cp("/tmp/akronet.sql", "$(almond_host)"),
        perms => mo("0600", "postgres"),
        classes => if_repaired("sql_dump_updated");

  commands:
    sql_dump_updated::
      "/usr/sbin/service" args => "unicorn_akronet stop";
      "/usr/bin/dropdb" args => "redmine_akronet_production",
        contain => setuid("postgres");
      "/usr/bin/createdb" args => "redmine_akronet_production",
        contain => setuid("postgres");
      "/usr/bin/psql" args => "-f /tmp/akronet.sql redmine_akronet_production",
        contain => setuid("postgres");
      "/usr/local/bin/rake RAILS_ENV=production" args => "-f /srv/akronet.synth.pl/Rakefile db:absolute_migrate";
      "/usr/local/bin/rake RAILS_ENV=production" args => "-f /srv/akronet.synth.pl/Rakefile db:migrate_plugins";
      "/usr/sbin/service" args => "unicorn_akronet start";
}

bundle agent sync_uploaded_files
{
  vars:
    "almond_host" string => "syntaxhighlighted.com";

  files:
    Min15::
      "/srv/akronet.synth.pl/files"
        copy_from => secure_cp("/var/lib/redmine/akronet/files/", "$(almond_host)"),
        perms => mo("0640", "www-data"),
        depth_search => recurse("inf"),
        action => immediate;
}

bundle agent create_akronet_sql_dump
{
  files:
    sql_dump_created::
      "/tmp/akronet.sql"
        perms => mog("0660", "kklimonda", "postgres");

  commands:
    Min05::
      "/usr/bin/pg_dump" args => "-c -f /tmp/akronet.sql redmine_akronet_production",
        contain => setuid("postgres"),
        classes => if_repaired("sql_dump_created");
}

bundle agent create_users(list)
{
  vars:
      "user" slist => getindices("$(list)");

  classes:
      "add_$(user)" not => userexists("$(user)");

  commands:
      "/usr/sbin/useradd $($(list)[$(user)][flags]) -s $($(list)[$(user)][shell]) -c '$($(list)[$(user)][fullname])' $(user)"
        ifvarclass => "add_$(user)";

  files:
      "/etc/shadow"
        edit_line => set_user_field("$(user)", 2, "$($(list)[$(user)][passwd_hash])");
      "/etc/group"
        edit_line => append_user_field("sudo", 4, "$(user)");
}

bundle edit_line edit_apt_config
{
  delete_lines:
      ".*";

  insert_lines:
      "APT::Install-Recommends \"0\";";
      "APT::Install-Suggests \"0\";";
}

body database_server postgres_master(user, password)
{
  any::
    db_server_owner => "$(user)";
    db_server_password => "$(password)";
    db_server_host => "localhost";
    db_server_type => "postgres";
    db_server_connection_db => "postgres";
}
